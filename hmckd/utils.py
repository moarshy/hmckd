# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_eda.ipynb (unless otherwise specified).

__all__ = []

# Internal Cell
from fastai.tabular.all import *
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import StratifiedKFold

# Internal Cell
def get_features(root):
    '''
    given the root of data folder, loads all features and returns a dict
    '''

    ldl = pd.read_csv(f'{root}/T_ldl.csv')
    creat = pd.read_csv(f'{root}/T_creatinine.csv')
    glu = pd.read_csv(f'{root}/T_glucose.csv')
    dbp = pd.read_csv(f'{root}/T_DBP.csv')
    sbp = pd.read_csv(f'{root}/T_SBP.csv')
    hgb = pd.read_csv(f'{root}/T_HGB.csv')

    return {'hgb':hgb,
            'ldl': ldl,
            'glucose':glu,
            'creatinine':creat,
            'sbp':sbp,
            'dbp':dbp}


med2como = {'atorvastatin':'cvd', 'losartan':'hbp', 'metformin':'diabetics',
            'rosuvastatin':'cvd', 'pravastatin':'cvd', 'carvedilol':'hbp', 'valsartan':'hbp',
            'metoprolol':'hbp', 'simvastatin':'cvd', 'bisoprolol':'hbp', 'atenolol':'hbp',
            'lovastatin':'cvd', 'olmesartan':'hbp', 'irbesartan':'hbp', 'canagliflozin':'diabetics',
            'dapagliflozin':'diabetics', 'telmisartan':'hbp', 'labetalol':'hbp', 'nebivolol':'hbp',
            'pitavastatin':'cvd', 'propranolol':'hbp'}

def make_como(demo, meds, med2como=med2como):
    '''given the demographic, meds dataset, returns demo dataset with comorbidities.

      `comorbidities`
       cvd - cardiovascular disease
       hbp - high blood pressure
       diabetics - diabetics
    '''
    demo = demo.sort_values('id').reset_index(drop=True)
    meds['como'] = meds['drug'].apply(lambda x: med2como[x])

    demo['cvd'] = 0
    demo['hbp'] = 0
    demo['diabetics'] = 0

    for i in range(300):
        como = meds[meds['id']==i]['como'].unique()
        for c in como:
            demo.loc[i,c] = 1

    return demo


def baseline_df(features:dict, train_df:pd.DataFrame):
    "prepares a single dataframe to be used for subsequent processes. Combines train_df (demographic, labels, fold) and the baseline features"

    d = None
    for k,v in features.items():
        if d is None:
            d = pd.DataFrame(v[v['time'] == 0].reset_index(drop=True).drop('time', axis=1)).rename(columns={'value':k})
        else:
            d = d.merge(pd.DataFrame(v[v['time'] == 0].reset_index(drop=True).drop('time', axis=1)).rename(columns={'value':k}), on='id')

    d = d.merge(train_df, on='id')

    return d


def get_tabpandas_dls(fold, train_df, procs, cat_names, cont_names, y_names, bs):

    '''
    prepares the dataloader the fastai tabular model expects. Can also be used for random forest

    train_df : dataframe to be used
    procs  : preprocessing such as normalization, fillna
    cat_names : the names of the categorical columns
    cont_names : the names of the continuous columns
    y_names : the label column
    bs : batch_size
    '''

    splits = [list(train_df[train_df['fold']!=fold].index),
              list(train_df[train_df['fold']==fold].index)]

    tabdf = TabularPandas(train_df,
                          procs=procs,
                          cat_names=cat_names,
                          cont_names=cont_names,
                          y_names=y_names,
                          y_block=CategoryBlock,
                          splits=splits)

    return tabdf.dataloaders(bs=bs), tabdf


def rf(xs, y, n_estimators=40, max_samples=200,
       max_features=0.5, min_samples_leaf=5, **kwargs):

    return RandomForestClassifier(n_jobs=-1, n_estimators=n_estimators,
                                  max_samples=max_samples, max_features=max_features,
                                  min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)


def rf_feat_importance(m, df):
    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}
                       ).sort_values('imp', ascending=False)


def plot_fi(fi):
    return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)