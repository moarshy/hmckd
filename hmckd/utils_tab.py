# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_tabmodel.ipynb (unless otherwise specified).

__all__ = []

# Internal Cell
from fastai.tabular.all import *
from .utils import get_features, baseline_df, get_tabpandas_dls, med2como

def timept_df(features:dict, timept=200, maxtimept=650):

    'prepares datapoints for a given timepoint'

    d = None
    for k,v in features.items():
        df = v[(v['time']!=0)]
        df = v[(v['time']<maxtimept)]
        allpat = list(v.id.unique())

        pair = []
        for pat in allpat:
            pattime = df[df['id']==pat]['time'].values
            pair.append((pat, min(pattime, key=lambda x:abs(x-timept))))

        value = []
        for pat, time in pair:
            value.append((pat, df[(df['id']==pat)&(df['time']==time)]['value'].values[0]))

        if d is None:
          d = pd.DataFrame(value).rename(columns={0:'id', 1:f"{k}_{timept}"})
        else:
          d = d.merge(pd.DataFrame(value).rename(columns={0:'id', 1:f"{k}_{timept}"}), on='id')

    return d


def prepare_df_ntimepoint(features, train_df, maxtimept, timepoints:list):

    "prepares a single dataframe for ntimepoint model based on given time points"

    bdf = baseline_df(features, train_df)

    for pt in timepoints:
        bdf = bdf.merge(timept_df(features, pt), on='id')

    cont_col = ['ldl', 'creatinine', 'glucose', 'sbp', 'dbp', 'hgb']
    cont_cols = []
    for pt in timepoints:
        for col in cont_col:
            cont_cols.append(f"{col}_{pt}")
    for col in cont_col: cont_cols.append(col)
    cont_cols.append('age')
    return bdf, cont_cols


def prepare_df_firstnpt(features, train_df, n_points=6, maxtimept=650):
    'prepares dataframe for first n-points model'
    tups = []
    feats = ['hgb', 'ldl', 'glucose', 'creatinine', 'sbp', 'dbp']
    for i in range(300):
        pts = [i]
        for k in feats:
            pat = features[k][features[k]['id'] == i]
            pat = pat[pat['time'] <maxtimept]
            pat = list(pat['value'].values)

            for j in range(n_points):
                if j < len(pat): pts.append(pat[j])
                else: pts.append(np.NaN)

        tups.append(pts)

    cols = ['id']
    for feat in feats:
        for i in range(n_points):
            cols.append(f"{feat}_{i}")

    df = pd.DataFrame(tups, columns=cols)
    df = train_df[['id', 'race', 'gender', 'age', 'fold', 'Stage_Progress']].merge(df, on='id')

    cont_cols = cols[1:]
    cont_cols.append('age')

    return df, cont_cols